<?php
/**
 * @file
 * Code for the Subfields module.
 */

/**
 * Implements hook_field_info().
 */
function subfields_field_info() {
  return array(
    'subfields' => array(
      'label' => t('Subfields'),
      'description' => t('This field stores subfield data in the database.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array('count' => 2),
      'default_widget' => 'subfields_subfields',
      'default_formatter' => 'subfields',
      // Support hook_entity_property_info() from contrib "Entity API".
      'property_type' => 'field_item_subfields',
      'property_callbacks' => array('subfields_field_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function subfields_field_formatter_info() {
  return array(
    'subfields_value' => array(
      'label' => t('Subfields Value'),
      'field types' => array('subfields'),
    ),
    'subfields_comma_list' => array(
      'label' => t('Subfields comma separated list'),
      'field types' => array('subfields'),
    ),
    'subfields_ul_list' => array(
      'label' => t('Subfields unordered list'),
      'field types' => array('subfields'),
    ),
    'subfields_ol_list' => array(
      'label' => t('Subfields ordered list'),
      'field types' => array('subfields'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function subfields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text.
    case 'subfields_value':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => array('subfields-value'),
          ),
          '#value' => filter_xss($item['value']),
        );
      }
      break;

    case 'subfields_comma_list':
      $list_items = array();
      foreach ($items as $item) {
        $list_items[] = filter_xss($item['value']);
      }

      // Render comma separated list.
      $element[0] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => array(
          'class' => array('subfields-list'),
        ),
        '#value' => implode(', ', $list_items),
      );
      break;

    case 'subfields_ul_list':
      $list_items = array();
      foreach ($items as $item) {
        $list_items[] = filter_xss($item['value']);
      }

      $element = array(
        '#theme' => 'item_list',
        '#items' => $list_items,
        '#attributes' => array(
          'class' => array('subfields-list'),
        ),
        '#type' => 'ul',
      );
      break;

    case 'subfields_ol_list':
      $list_items = array();
      foreach ($items as $item) {
        $list_items[] = filter_xss($item['value']);
      }

      $element = array(
        '#theme' => 'item_list',
        '#items' => $list_items,
        '#attributes' => array(
          'class' => array('subfields-list'),
        ),
        '#type' => 'ol',
      );
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function subfields_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function subfields_field_widget_info() {
  return array(
    'subfields_subfields' => array(
      'label' => t('Subfields'),
      'field types' => array('subfields'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 */
function subfields_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  if ($field['type'] == 'subfields') {
    $form['max_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum length'),
      '#default_value' => $settings['max_length'],
      '#required' => TRUE,
      '#description' => t('The maximum length of the field in characters.'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function subfields_field_instance_settings_form($field, $instance) {
  $has_data = field_has_data($field);
  $description = '';
  if ($has_data) {
    $description = '<p>' . t('Because the field already has data, some settings can no longer be changed.') . '</p>';
  }

  $form['#tree'] = TRUE;
  $widget = $instance['widget'];
  $settings = $instance['settings'];

  if ($widget['type'] == 'subfields_subfields') {
    $form['count'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of subfields'),
      '#default_value' => $settings['count'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $form['subfields'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sub-fields'),
      '#description' => $description,
    );
    for ($i = 0; $i < $settings['count']; $i++) {
      $form['subfields'][$i]['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => array(
          'textfield' => t('Textfield'),
          'select' => t('Select List'),
        ),
        '#default_value' => isset($settings['subfields'][$i]['type']) ? $settings['subfields'][$i]['type'] : 'textfield',
        '#required' => TRUE,
        '#description' => t('Type of field to create.'),
        '#prefix' => '<fieldset class="form-wrapper"> <div class="fieldset-wrapper">',
        '#disabled' => $has_data,
      );
      if (isset($settings['subfields'][$i]['type']) && $settings['subfields'][$i]['type'] == 'select') {
        $form['subfields'][$i]['allowed_values'] = array(
          '#type' => 'textarea',
          '#title' => t('Allowed values list'),
          '#default_value' => isset($settings['subfields'][$i]['allowed_values']) ? list_allowed_values_string($settings['subfields'][$i]['allowed_values']) : '',
          '#rows' => 10,
          '#element_validate' => array('list_allowed_values_setting_validate'),
          '#field_has_data' => FALSE,
          '#field' => $field,
          '#field_type' => $field['type'],
          '#description' => t('The possible values this field can contain. Enter one value per line, in the format key|label.'),
          '#disabled' => $has_data,
        );
      }
      $form['subfields'][$i]['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum Length'),
        '#maxlength' => 60,
        '#size' => 2,
        '#default_value' => isset($settings['subfields'][$i]['max_length']) ? $settings['subfields'][$i]['max_length'] : '2',
        '#element_validate' => array('element_validate_integer_positive'),
        '#required' => TRUE,
        '#description' => t('Max length of data entered.'),
      );
      $form['subfields'][$i]['required'] = array(
        '#type' => 'checkbox',
        '#title' => t('Required'),
        '#return_value' => TRUE,
        '#default_value' => isset($settings['subfields'][$i]['required']) ? $settings['subfields'][$i]['required'] : FALSE,
        '#description' => t('Marker to denote if subfield has required input.'),
      );
      $form['subfields'][$i]['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => isset($settings['subfields'][$i]['title']) ? $settings['subfields'][$i]['title'] : '',
        '#description' => t('Title of subfield. (optional)'),
      );
      $form['subfields'][$i]['default_value'] = array(
        '#type' => 'textfield',
        '#title' => t('Default Value'),
        '#default_value' => isset($settings['subfields'][$i]['default_value']) ? $settings['subfields'][$i]['default_value'] : '',
        '#description' => t('Default value of subfield. (optional)'),
      );
      if (isset($settings['subfields'][$i]['type']) && $settings['subfields'][$i]['type'] != 'select') {
        $form['subfields'][$i]['placeholder'] = array(
          '#type' => 'textfield',
          '#title' => t('Placeholder text'),
          '#default_value' => isset($settings['subfields'][$i]['placeholder']) ? $settings['subfields'][$i]['placeholder'] : '',
          '#description' => t('Placeholder value of subfield. (optional)'),
        );
      }
      $form['subfields'][$i]['class'] = array(
        '#type' => 'textfield',
        '#title' => t('CSS classes'),
        '#default_value' => isset($settings['subfields'][$i]['class']) ? $settings['subfields'][$i]['class'] : '',
        '#description' => t('CSS class or classes, separated by spaces. (optional)'),
      );
      if ($settings['subfields'][$i]['type'] != 'select') {
        $form['subfields'][$i]['validation_regex'] = array(
          '#type' => 'textfield',
          '#title' => t('Validation Regex'),
          '#default_value' => isset($settings['subfields'][$i]['validation_regex']) ? $settings['subfields'][$i]['validation_regex'] : '',
          '#description' => t('<a href="http://www.php.net/manual/en/reference.pcre.pattern.syntax.php" target="_blank">PCRE</a> regex validation e.g. %example will check for positive numeric numbers that do not begin with zero.', array(
            '%example' => '/^[1-9][0-9]*$/',
          )),
        );
        $form['subfields'][$i]['validation_description'] = array(
          '#type' => 'textfield',
          '#title' => t('Validation Description'),
          '#default_value' => isset($settings['subfields'][$i]['validation_description']) ? $settings['subfields'][$i]['validation_description'] : '',
          '#description' => t('Provide a description for error messages. (optional)'),
          '#maxlength' => 512,
        );
      }
      $form['subfields'][$i]['prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Prefix'),
        '#default_value' => isset($settings['subfields'][$i]['prefix']) ? $settings['subfields'][$i]['prefix'] : '',
        '#description' => t('Prefix text for the subfield. (optional)'),
        '#disabled' => $has_data,
      );
      $form['subfields'][$i]['suffix'] = array(
        '#type' => 'textfield',
        '#title' => t('Suffix'),
        '#default_value' => isset($settings['subfields'][$i]['suffix']) ? $settings['subfields'][$i]['suffix'] : '',
        '#description' => t('Suffix text for the subfield. (optional)'),
        '#suffix' => '</div></fieldset>',
        '#disabled' => $has_data,
      );
    }
  }

  return $form;
}

/**
 * Element validation handler: Validation Description.
 */
function subfields_field_instance_settings_form_validation_description_validate($element, &$form_state, $form) {
  $parents = $element['#parents'];
  array_pop($parents);

  $field_state = drupal_array_get_nested_value($form_state, $parents);
}

/**
 * Implements hook_field_widget_form().
 */
function subfields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['settings'];
  $field_name = $field['field_name'];

  // Wrap everything in a fieldset. This is not the best looking element,
  // but it's the only wrapper available in Drupal we can properly use
  // in that context, and it is overridable if necessary.
  $element['subfields'] = array(
    '#type' => 'fieldset',
  );

  // If the field has a cardinality of one, then populate the title on the
  // on the fieldset.
  if ($field['cardinality'] == 1) {
    $element['subfields']['#title'] = $element['#title'];
  }

  $subfields = array();
  if (!empty($settings['subfields'])) {
    foreach ($settings['subfields'] as $subfield_delta => $subfield_setting) {
      // Build the subfields by type.
      switch ($subfield_setting['type']) {
        case 'textfield':
          if (isset($subfield_setting['validation_regex']) || array_key_exists('validation_regex', $subfield_setting)) {
            $subfields[$subfield_delta] = array(
              '#type' => 'textfield',
              '#validation_regex' => check_plain($subfield_setting['validation_regex']),
              '#validation_description' => check_plain($subfield_setting['validation_description']),
            );
          }

          // Set placeholder (if provided).
          if (!empty($subfield_setting['placeholder'])) {
            $subfields[$subfield_delta]['#attributes']['placeholder'] = check_plain($subfield_setting['placeholder']);
          }

          // Set max_length and size to the same thing.
          if (isset($subfield_setting['max_length'])) {
            $subfields[$subfield_delta]['#maxlength'] = check_plain($subfield_setting['max_length']);
            $subfields[$subfield_delta]['#size'] = check_plain($subfield_setting['max_length']);
          }
          break;

        case 'select':
          $subfields[$subfield_delta] = array(
            '#type' => 'select',
            '#options' => isset($subfield_setting['allowed_values']) ? $subfield_setting['allowed_values'] : array(),
          );
          // If the select list is not required, then add an empty value.
          if (!$subfield_setting['required']) {
            $subfields[$subfield_delta]['#empty_value'] = '';
          }
          break;
      }

      // Render suffix.
      _subfields_value($subfields, $subfield_delta, $subfield_setting, 'prefix', $field_name);

      // Fill from subfield settings.
      if (!empty($subfield_setting['title'])) {
        $subfields[$subfield_delta]['#title'] = check_plain($subfield_setting['title']);
      }

      // Don't mark fields required if on the field ui edit form.
      if ($form_state['build_info']['form_id'] != 'field_ui_field_edit_form') {
        $subfields[$subfield_delta]['#required'] = $subfield_setting['required'];
      }

      // Restore values from the serialized data.
      if (isset($items[$delta]['serialized'])) {
        $unserialized = unserialize($items[$delta]['serialized']);
        $subfields[$subfield_delta]['#default_value'] = isset($unserialized[$subfield_delta]) ? $unserialized[$subfield_delta] : NULL;
      }
      elseif ($subfield_setting['default_value']) {
        $subfields[$subfield_delta]['#default_value'] = $subfield_setting['default_value'];
      }

      if (!empty($subfield_setting['class'])) {
        foreach (explode(' ', $subfield_setting['class']) as $class) {
          $subfields[$subfield_delta]['#attributes']['class'][] = $class;
        }
      }

      // Add a default class.
      $subfields[$subfield_delta]['#attributes']['class'][] = drupal_html_id(drupal_clean_css_identifier($field_name));

      // Render suffix.
      _subfields_value($subfields, $subfield_delta, $subfield_setting, 'suffix', $field_name);
    }
  }
  else {
    $subfields[] = array(
      '#type' => 'textfield',
    );
  }

  $element['subfields'] += $subfields;

  if (empty($element['#required'])) {
    $element['#after_build'][] = 'subfields_field_widget_embed_delay_required_validation';
  }

  $element += array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'subfields') . '/css/subfields.css'),
    ),
    '#element_validate' => array('subfields_field_widget_validate'),
  );

  return $element;
}

/**
 * FAPI #after_build of subfield element to delay the validation of #required.
 *
 * Copied from field_collection.
 */
function subfields_field_widget_embed_delay_required_validation(&$element, &$form_state) {
  // If the process_input flag is set, the form and its input is going to be
  // validated. Prevent #required (sub)fields from throwing errors while
  // their non-#required item is empty.
  if ($form_state['process_input']) {
    _subfield_collect_required_elements($element, $element['#subfields_required_elements']);
  }
  return $element;
}

/**
 * Helper function to collect required items.
 *
 * Copied from field_collection.
 */
function _subfield_collect_required_elements(&$element, &$required_elements) {
  // Recurse through all children.
  foreach (element_children($element) as $key) {
    if (isset($element[$key]) && $element[$key]) {
      _subfield_collect_required_elements($element[$key], $required_elements);
    }
  }
  if (!empty($element['#required'])) {
    $element['#required'] = FALSE;
    $required_elements[] = &$element;
    $element += array('#pre_render' => array());
    array_unshift($element['#pre_render'], 'subfields_field_widget_render_required');
  }
}


/**
 * Pre_render callback that ensures the element is rendered as being required.
 *
 * Copied from field_collection.
 */
function subfields_field_widget_render_required($element) {
  $element['#required'] = TRUE;
  return $element;
}


/**
 * Widget validation handler: Subfields widget.
 */
function subfields_field_widget_validate($element, &$form_state, $form) {
  $parents = $element['#parents'];
  $existing = drupal_array_get_nested_value($form_state['values'], $parents);

  // If we don't ignore the field ui form, then it requires all required fields
  // be populated.
  if ($form['#form_id'] == 'field_ui_field_edit_form') {
    $form_value['value'] = '';
    if (isset($existing['_weight'])) {
      $form_value['_weight'] = $existing['_weight'];
    }
    drupal_array_set_nested_value($form_state['values'], $parents, $form_value);
    return;
  }

  // Need to merge the subfields into 'value' & 'serialized' for form submit.
  // Here we collect those details and track if the data is "empty".
  $value = '';
  $serialize = array();
  $empty = TRUE;
  foreach (element_children($element['subfields']) as $delta) {
    // This makes the assumption that some textfield data must be entered.
    // e.g. A field of only select lists isn't possible.
    if ($element['subfields'][$delta]['#type'] == 'textfield' && !empty($element['subfields'][$delta]['#value'])) {
      $empty = FALSE;
    }
    // Only add prefix/suffix to the full string if there is a #value.
    if (strlen($element['subfields'][$delta]['#value'])) {
      $value .= $element['subfields'][$delta]['#prefix_value'];
      $value .= $element['subfields'][$delta]['#value'];
      $value .= $element['subfields'][$delta]['#suffix_value'];
    }
    $serialize[$delta] = $element['subfields'][$delta]['#value'];
  }

  // Now walk through the data another time.
  // If all user enter-able data is empty, then mark the value is empty string.
  if ($empty) {
    $form_value['value'] = '';
    $form_value['serialized'] = '';
  }
  else {
    $form_value['value'] = $value;
    // Function drupal_write_record() is not called for fields so
    // the value must be manually serialized.
    $form_value['serialized'] = serialize($serialize);

    // Validate required elements since the subfields are not empty.
    // Copied from field_collection.
    if (!empty($element['#subfields_required_elements'])) {
      foreach ($element['#subfields_required_elements'] as &$elements) {
        // Copied from _form_validate().
        if (isset($elements['#needs_validation'])) {
          $is_empty_multiple = (!count($elements['#value']));
          $is_empty_string = (is_string($elements['#value']) && drupal_strlen(trim($elements['#value'])) == 0);
          $is_empty_value = ($elements['#value'] === 0);
          if ($is_empty_multiple || $is_empty_string || $is_empty_value) {
            if (isset($elements['#title'])) {
              form_error($elements, t('!name value is required.', array('!name' => $elements['#title'])));
            }
            else {
              form_error($elements, t('Value is required.'));
            }
          }
        }
      }
    }
    // If the field is not empty, run regex validation against it.
    foreach (element_children($element['subfields']) as $delta) {
      if ($element['subfields'][$delta]['#type'] == 'textfield') {
        $regex = $element['subfields'][$delta]['#validation_regex'];
        if (!empty($regex) && !preg_match($regex, $element['subfields'][$delta]['#value'])) {
          $error_msg = t('Value is invalid');
          if (!empty($element['subfields'][$delta]['#validation_description'])) {
            $error_msg = t('@validation_description', array(
              '@validation_description' => $element['subfields'][$delta]['#validation_description'],
            ));
          }
          elseif (isset($element['subfields'][$delta]['#title'])) {
            $error_msg = t('%name is invalid.', array(
              '%name' => $element['subfields'][$delta]['#title'],
            ));
          }
          form_error($element['subfields'][$delta], $error_msg);
        }
      }
    }
  }

  if (isset($existing['_weight'])) {
    $form_value['_weight'] = $existing['_weight'];
  }
  drupal_array_set_nested_value($form_state['values'], $parents, $form_value);
}

/**
 * Helper function to handle prefix/suffix.
 */
function _subfields_value(&$subfields, $subfield_delta, $subfield_setting, $type, $field_name) {
  // Prepare render array.
  $class_tag = drupal_attributes(array(
    'class' => array(
      $type,
      'subfields-value',
      drupal_html_id(drupal_clean_css_identifier($field_name)),
    ),
  ));
  $subfields[$subfield_delta]['#' . $type] = '<div ' . $class_tag . '>' . filter_xss($subfield_setting[$type]) . '</div>';

  // Store the plain value for later usage.
  $subfields[$subfield_delta]['#' . $type . '_value'] = $subfield_setting[$type];
}

/**
 * Additional callback to adapt the property info of subfields.
 * @see entity_metadata_field_entity_property_info()
 */
function subfields_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['property info'] = subfields_field_item_property_info();
}

/**
 * Defines info for the properties of the subfields item data structure.
 */
function subfields_field_item_property_info() {
  $properties['value'] = array(
    'type' => 'text',
    'label' => t('The combined value of the subfields.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $properties;
}
