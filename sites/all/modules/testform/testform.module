<?php
function testform_menu() {
    $items = array();
    $items['search_form_success_page'] = array(
        'title' => 'Api Results',
        'page callback' => 'search_form_success',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['search'] = array(
        'title' => 'Add Show',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('api_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['episodes/%'] = array(
        'title' => 'Api Results',
        'page callback' => 'episode_guide',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['delete_episodes'] = array(
        'title' => 'Delete',
        'page callback' => 'episode_delete',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['remove_show'] = array(
        'title' => 'Remove Show',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('show_remove_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['collection'] = array(
        'title' => 'Your Collection',
        'page callback' => 'collection',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['show/%'] = array(
        'title' => 'Episodes for:',
        'page callback' => 'show_episodes',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function api_form() {
  $form['show_name_search'] = array(
      '#title' => 'Show Name',
      '#type' => 'textfield',
      '#description' => t('What show are you looking for.'),
  ); 

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Enter',
  );

  return $form;
}

function api_form_submit($form, &$form_state) {
    $show_name = $form_state['values']['show_name_search'];
    $_SESSION['api_form_values'] = $show_name;

    $form_state['redirect'] = 'search_form_success_page';
    
}

function search_form_success() {
    $show_name = $_SESSION['api_form_values'];
    $show_name_clean = str_replace(" ", "+", $show_name);
    $response = file_get_contents('http://api.tvmaze.com/search/shows?q=' . $show_name_clean);
    $answer = "<h3>Click Link to add show to your account</h3><p>Search results for: '" . $show_name . "'</p><ul>";
    
    $decode = json_decode($response, true);
    foreach ($decode as $episode) {
      $answer .= "<li><a href='/episodes/" . $episode['show']['id'] . "'>" . $episode['show']['name'] . ' (' . substr($episode['show']['premiered'], 0, 4) .")</a></li>";
    }
    return $answer .= "</ul>";
}

function episode_guide($arg){
  global $user;
  $response = file_get_contents('http://api.tvmaze.com/shows/' . $arg . '/episodes');
  $decode = json_decode($response, true);
  
  $show = file_get_contents('http://api.tvmaze.com/shows/' . $arg);
  $show_data = json_decode($show, true);
  $dates = array();
  
  $query = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('status', 1)
      ->condition('type', 'show')
      ->condition('title', $show_data['name'])
      ->execute();

  $test = false;
  foreach ($query as $record) {
    $test = true;
    
    $found_node = node_load($record->nid);
    $found_user = false;
    foreach ($found_node->field_show_users['und'] as $selected_user) {
      if($selected_user['uid']==$user->uid){
        $found_user = true;
      }
    }
    if(!$found_user){
      array_push($found_node->field_show_users['und'], array('uid'=>$user->uid));
      $found_node = node_submit($found_node);
      node_save($found_node);
      drupal_set_message($show_data['name'] . " has been added to your collection!");
      
    }
  }
  if(!$test){
    $new_node = new stdClass();
    $new_node->title = $show_data['name'];
    $new_node->type = "show";
    node_object_prepare($new_node);
    $new_node->uid = $user->uid;
    $new_node->status = 1;
    $new_node->language = LANGUAGE_NONE;
    $new_node->field_show_id['und'][0] = array('value'=>$show_data['id']);
    $new_node->field_last_updated['und'][0] = array('value'=>$show_data['updated']);
    $new_node->field_show_users['und'][0] = array('uid'=>$user->uid);
    $new_node->field_show_network['und'][0] = array('value'=>$show_data['network']['name']);
    $new_node->field_show_summary['und'][0] = array('value'=>$show_data['summary'], 'format'=>'full_html');
    $new_node->field_show_status['und'][0] = array('value'=>$show_data['status']);
    $new_node->field_imdb['und'][0] = array('value'=>"<a href='http://www.imdb.com/title/" . $show_data['externals']['imdb'] . "/'>IMDB</a>", 'format'=>'full_html');
    $new_node = node_submit($new_node);
    node_save($new_node);
    drupal_set_message($show_data['name'] . " has been added to your collection!");
    
    
    $api_response = file_get_contents('http://api.tvmaze.com/shows/' . $show_data['id'] . '/episodes');
    $decode = json_decode($api_response, true);
    foreach ($decode as $episode) {
        $new_episode = new stdClass();
        $new_episode->title = $episode['name'];
        $new_episode->type = "episode";
        node_object_prepare($new_episode);
        $new_episode->uid = $user->uid;
        $new_episode->status = 1;
        $new_episode->language = LANGUAGE_NONE;
        $new_episode->field_episode_show_id['und'][0] = array('value'=>$show_data['id']);
        $new_episode->field_episode_show_name['und'][0] = array('value'=>$show_data['name']);
        if($episode['airtime']==""){
          $episode['airtime'] = '01:00';
        }
        $new_episode->field_episode_date['und'][0] = array('value'=>$episode['airdate'] . " " . $episode['airtime'] . ":00");
        $new_episode->field_show_ref['und'][0] = array('nid'=>$new_node->nid);
        $new_episode->field_episode_id['und'][0] = array('value'=>$episode['id']);
        $new_episode->field_season['und'][0] = array('value'=>$episode['season']);
        $new_episode->field_episode_number['und'][0] = array('value'=>$episode['number']);
        $new_episode->field_episode_summary['und'][0] = array('value'=>$episode['summary'], 'format'=>'full_html');
        $new_episode = node_submit($new_episode);
        node_save($new_episode);
    }
  }
  
  drupal_goto('<front>');

}

function episode_delete(){
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'episode')
    ->execute();
      
  foreach($query as $show_node) {
    $node = node_load($show_node->nid);
    node_delete($node->nid);
  }
  drupal_set_message("All episodes deleted");
  return "";
}

function show_remove_form(){
  global $user;
  
  $result = db_query('SELECT * FROM field_data_field_show_users WHERE field_show_users_uid =' . $user->uid);
  $options =  array();
  foreach ($result as $key) {
    $node = node_load($key->entity_id);
    $options[$node->nid] = t($node->title);
  }
  asort($options);
  $form['shows'] = array(
       '#type' => 'select',
       '#title' => t('Select Show you wish to remove'),
       '#options' => $options,
   );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Enter',
  );

  return $form;
}

function show_remove_form_submit($form, &$form_state) {
  global $user;
  
    $show_id = $form_state['values']['shows'];
    
    $node = node_load($show_id);
    $show_name = $node->title;
    $user_array = $node->field_show_users['und'];
    for($i = 0;$i<count($user_array);$i++){
      if($user->uid==$user_array[$i]['uid']){
        array_splice($user_array, $i);
      }
    }
    $node->field_show_users['und'][0] = $user_array;
    $node = node_submit($node);
    node_save($node);
    drupal_set_message("'" . $show_name . "' was successfully removed from your show list");
    $form_state['redirect'] = 'remove_show';
    
}


function testform_page_alter(&$page){
  global $user;
  $last_update = db_query('SELECT * FROM show_info ORDER BY show_id DESC LIMIT 1')->fetchAssoc();
  if($_GET['q'] == 'calendar' && ($last_update['last_update']+86400000)< time()){
    $response = file_get_contents('http://api.tvmaze.com/updates/shows');
    $decode = json_decode($response, true);
    
    $result = db_query("SELECT nid FROM node WHERE type = :nodeType ", array(':nodeType'=>$node_type)); //<-- change 1

    foreach($result as $show_node) {
      $node = node_load($show_node);
      if($node->field_last_updated['und'][0]['value'] < $decode[$node->field_show_id['und'][0]['value']]){
        $show = file_get_contents('http://api.tvmaze.com/shows/' . $node->field_show_id['und'][0]['value']);
        $show_data = json_decode($show, true);
        
        $episode_response = file_get_contents('http://api.tvmaze.com/shows/' . $node->field_show_id['und'][0]['value'] . '/episodes');
        $episode_decode = json_decode($episode_response, true);
          //update show information
          node_object_prepare($node);
          $node->field_show_id['und'][0] = array('value'=>$show_data['id']);
          $node->field_last_updated['und'][0] = array('value'=>$show_data['updated']);
          $node->field_show_network['und'][0] = array('value'=>$show_data['network']['name']);
          $node->field_show_summary['und'][0] = array('value'=>$show_data['summary'], 'format'=>'full_html');
          $node->field_show_status['und'][0] = array('value'=>$show_data['status']);
          $node = node_submit($node);
          node_save($node);
          
          foreach ($episode_decode as $episode) {
            $ep_query = db_select('node', 'n')
              ->fields('n', array('nid', 'title'))
              ->condition('status', 1)
              ->condition('type', 'episode')
              ->condition('title', $episode['name'])
              ->execute()
              ->fetchAssoc();
            if(!$ep_query){
              $new_episode = new stdClass();
              $new_episode->title = $episode['name'];
              $new_episode->type = "episode";
              node_object_prepare($new_episode);
              $new_episode->uid = $user->uid;
              $new_episode->status = 1;
              $new_episode->language = LANGUAGE_NONE;
              $new_episode->field_episode_show_id['und'][0] = array('value'=>$show_data['id']);
              $new_episode->field_episode_show_name['und'][0] = array('value'=>$show_data['name']);
              if($episode['airtime']==""){
                $episode['airtime'] = '01:00';
              }
              $new_episode->field_episode_date['und'][0] = array('value'=>$episode['airdate'] . " " . $episode['airtime'] . ":00");
              $new_episode->field_show_ref['und'][0] = array('nid'=>$show_node->nid);
              $new_episode->field_episode_id['und'][0] = array('value'=>$episode['id']);
              $new_episode->field_season['und'][0] = array('value'=>$episode['season']);
              $new_episode->field_episode_number['und'][0] = array('value'=>$episode['number']);
              $new_episode->field_episode_summary['und'][0] = array('value'=>$episode['summary'], 'format'=>'full_html');
              $new_episode = node_submit($new_episode);
              node_save($new_episode);
            }
          }
        drupal_set_message("Updated Episodes for: " . $show_node->title);
      }
    }
    $nid = db_insert('show_info')
      ->fields(array(
        'last_update' => time()
      ))
      ->execute();
  }
}

function collection(){
  global $user;
  
  $output = "<ul>";
  
  $result = db_query('SELECT * FROM field_data_field_show_users WHERE field_show_users_uid =' . $user->uid);
  $options =  array();
  foreach ($result as $key) {
    $node = node_load($key->entity_id);
    $options[$key->entity_id] = $node->title;
  }
  asort($options);
  foreach ($options as $id => $value) {
    # code...
    $output .= "<li><a href='/show/" . $id . "'>" . $value . "</a></li>";
  }
  
  $output .= "</ul>";
  return $output;
}

function show_episodes($arg){
  $node = node_load($arg);
  $show_id = $node->field_show_id['und'][0]['value'];
  $result = db_query('SELECT * FROM field_data_field_episode_show_id WHERE field_episode_show_id_value =' . $show_id);

  $output = "<h3><a href='/node/" . $arg . "'>" . $node->title . "</a></h3><ul>";
  foreach ($result as $episode) {
    $ep_node = node_load($episode->entity_id);
    $ep_date = $ep_node->field_episode_date['und'][0]['value'];
    
    if($ep_node->field_season['und'][0]['value']<10){
      $season = "0" . $ep_node->field_season['und'][0]['value'];
    }else{
      $season = $ep_node->field_season['und'][0]['value'];
    }
    
    if($ep_node->field_episode_number['und'][0]['value']<10){
      $episode_num = "0" . $ep_node->field_episode_number['und'][0]['value'];
    }else{
      $episode_num = $ep_node->field_episode_number['und'][0]['value'];
    }
    
    $output .= "<li><a href='/node/" . $ep_node->nid . "'> S" . $season . "E" . $episode_num . " - " . $ep_node->title . "</a>: " . date("M jS Y",strtotime($ep_date)) . "</li>";
  }
  
  
  return $output;
}